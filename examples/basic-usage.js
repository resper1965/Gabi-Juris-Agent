import MCPClient from '../src/client.js';
import { MCPWebSocketClient } from '../src/websocket-client.js';

// Exemplo b√°sico de uso do cliente MCP
async function exemploBasico() {
  console.log('üöÄ Iniciando exemplo b√°sico de MCP...\n');
  
  const client = new MCPClient();
  
  try {
    // Conectar ao servidor
    await client.connect();
    console.log('‚úÖ Conectado ao servidor MCP\n');
    
    // Listar ferramentas dispon√≠veis
    console.log('üìã Ferramentas dispon√≠veis:');
    const tools = await client.listTools();
    console.log(JSON.stringify(tools, null, 2));
    console.log();
    
    // Exemplo 1: Informa√ß√µes do sistema
    console.log('üíª Informa√ß√µes do sistema:');
    const sysInfo = await client.getSystemInfo();
    console.log(sysInfo.content[0].text);
    console.log();
    
    // Exemplo 2: Opera√ß√£o com arquivo
    console.log('üìÅ Opera√ß√£o com arquivo:');
    const fileList = await client.fileOperation('list', './');
    console.log(fileList.content[0].text);
    console.log();
    
    // Exemplo 3: Requisi√ß√£o de API
    console.log('üåê Requisi√ß√£o de API:');
    const apiResponse = await client.apiRequest('https://jsonplaceholder.typicode.com/posts/1');
    console.log(apiResponse.content[0].text);
    console.log();
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

// Exemplo de uso com WebSocket
async function exemploWebSocket() {
  console.log('üîå Iniciando exemplo WebSocket MCP...\n');
  
  const client = new MCPWebSocketClient();
  
  try {
    // Conectar ao servidor WebSocket
    await client.connect();
    console.log('‚úÖ Conectado ao servidor WebSocket MCP\n');
    
    // Enviar mensagem de chat
    console.log('üí¨ Enviando mensagem de chat:');
    const chatResult = await client.sendChatMessage(
      'Ol√°! Este √© um teste do MCP WebSocket!',
      'usuario-teste',
      'sala-demo'
    );
    console.log(chatResult.content[0].text);
    console.log();
    
    // Enviar notifica√ß√£o
    console.log('üîî Enviando notifica√ß√£o:');
    const notificationResult = await client.sendNotification(
      'Teste MCP',
      'Esta √© uma notifica√ß√£o de teste!',
      'success'
    );
    console.log(notificationResult.content[0].text);
    console.log();
    
    // Obter dados em tempo real
    console.log('üìä Dados em tempo real:');
    const realTimeData = await client.getRealTimeData('sensor-teste', 1000);
    console.log(realTimeData.content[0].text);
    console.log();
    
    // Manter conex√£o por alguns segundos para receber mensagens
    console.log('‚è≥ Aguardando mensagens por 5 segundos...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
  } catch (error) {
    console.error('‚ùå Erro WebSocket:', error.message);
  } finally {
    await client.disconnect();
    console.log('üîå Desconectado do WebSocket');
  }
}

// Exemplo de integra√ß√£o com diferentes tipos de dados
async function exemploIntegracao() {
  console.log('üîó Iniciando exemplo de integra√ß√£o...\n');
  
  const client = new MCPClient();
  
  try {
    await client.connect();
    
    // Simular consulta de banco de dados
    console.log('üóÑÔ∏è Consulta de banco de dados:');
    const dbResult = await client.databaseQuery(
      'SELECT * FROM users WHERE active = true',
      'user_database'
    );
    console.log(dbResult.content[0].text);
    console.log();
    
    // Simular busca na web
    console.log('üîç Busca na web:');
    const searchResult = await client.webSearch('Model Context Protocol');
    console.log(searchResult.content[0].text);
    console.log();
    
    // Criar e ler arquivo
    console.log('üìù Criando e lendo arquivo:');
    const testContent = 'Este √© um arquivo de teste criado via MCP!\n' + 
                       'Timestamp: ' + new Date().toISOString();
    
    await client.fileOperation('write', './teste-mcp.txt', testContent);
    console.log('‚úÖ Arquivo criado');
    
    const readResult = await client.fileOperation('read', './teste-mcp.txt');
    console.log('üìñ Conte√∫do do arquivo:');
    console.log(readResult.content[0].text);
    console.log();
    
  } catch (error) {
    console.error('‚ùå Erro na integra√ß√£o:', error.message);
  }
}

// Fun√ß√£o principal para executar todos os exemplos
async function executarExemplos() {
  console.log('üéØ EXEMPLOS DE INTEGRA√á√ÉO MCP\n');
  console.log('=' .repeat(50));
  
  // Exemplo b√°sico
  await exemploBasico();
  console.log('=' .repeat(50));
  
  // Exemplo WebSocket
  await exemploWebSocket();
  console.log('=' .repeat(50));
  
  // Exemplo de integra√ß√£o
  await exemploIntegracao();
  console.log('=' .repeat(50));
  
  console.log('‚úÖ Todos os exemplos foram executados!');
}

// Executar se este arquivo for executado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  executarExemplos().catch(console.error);
}

export { exemploBasico, exemploWebSocket, exemploIntegracao, executarExemplos }; 